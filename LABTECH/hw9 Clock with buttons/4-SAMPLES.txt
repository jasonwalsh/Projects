SAMPLE CODE FOR THE CLOCK:

This file has three things in it:

    1) skeleton code for handling keystrokes and mouse clicks,
    2) a "stop_clock()" function which causes the program to end,
and
    3) code indicating how the clock's mode might be set.


1) Handling Keys

Here is an example "process_key()" function.


void process_key(keybits KeyCode)
{
    void stop_clock(void);
    int KeyRow, KeyCol;

    if (KeyCode & 0x80) {  // mouse hit

        // TODO: add code to figure out which row / column
        //       the button is in

        if (KeyRow == 0) {
            switch (KeyCol) {
                case 0:
                    ampm = 0;
                    break;
                case 1:
                    ampm = 1;
                    break;
                case 2:
                    break;
                case 3:
                    break;
                case 4:
                    stop_clock();
                    break;
            }
        }
    } else { // keystroke
        switch(KeyCode) {
            case '2':
                ampm = 0;
                break;
            case 'a':
                ampm = 1;
                break;
            case 'q':
                stop_clock();
                break;
        }
    }
}


2) Stopping.  Here is a "stop_cloc()" function which works with the
   code above.


void stop_clock()
{
    end_display();
    exit(0);
}



3) Date/Test Mode Explained

This code would go in "clock.h":

extern int display_mode;

#define  MODE_CLOCK  0x00
#define  MODE_DATE   0x01
#define  MODE_TEST   0x02

Then you would do this:

a) In "clock.c", put a declaration "int display_mode = MODE_CLOCK;"
   (The "extern" in "clock.h" says that it will be declared somewhere;
    this one actually declares it.)

b) Also in "clock.c", right below the line from (a), put a line:
   "int mode_expires;".  This will hold the time when you switch
   back to normal mode.

c) In the "process_key()" function, for the "Date" and "Test" button,
   switch the display_mode to the appropriate defined value, and set
   "mode_expires" to the time when the mode expires.  (Probably
   something like "current time + 5 seconds".)

d) In the "tick()" function, if the mode is for test or date, check
   to see if the time set in (d) has expired, and if so switch back
   to regular clock mode.

e) In the "ledshow()" function, check the display_mode variable.
   If it's regular clock mode, do what you already wrote.  If it's
   date mode, show the date.  If it's test mode, do a test.


