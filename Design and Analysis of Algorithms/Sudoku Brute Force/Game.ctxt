#BlueJ class context
comment0.params=args
comment0.target=Game(java.lang.String)
comment1.params=theBoard
comment1.target=boolean\ Solve(int[][])
comment1.text=\r\n\ Attempts\ to\ solve\ the\ input\ board\ by\ brute\ force.\ This\ method\ traverses\ each\ element\ and\ replaces\ all\ zeros\ with\ the\ corrosponding\ elementt\ in\ our\ \r\n\ answerArray.\ If\ the\ current\ values\ in\ answerArray\ are\ incorrect,\ this\ method\ calls\ Increment()\ to\ increase\ the\ elements\ in\ answerArray\ by\ one,\ and\ tries\ again.\r\n\ This\ continues\ until\ we\ have\ found\ the\ correct\ combination\ of\ digits,\ or\ until\ we\ try\ every\ possible\ combination\ of\ input.\r\n\ \r\n\ @param\ theBoard\ the\ board\ we\ are\ solving\r\n\ @returns\ true\ if\ this\ board\ is\ solved\r\n
comment2.params=digit
comment2.target=void\ Increment(int)
comment2.text=\r\n\ This\ method\ increases\ our\ values\ stored\ in\ answerArray\ starting\ at\ the\ least\ significant\ (or\ "right-most")\ digit.\ \r\n\ If\ the\ least\ significant\ digit\ is\ the\ highest\ possible\ number\ that\ can\ be\ used\ for\ the\ board,\ this\ method\ returns\ that\ value\ back\ to\ one,\r\n\ and\ increases\ the\ next\ most\ significant\ digit\ by\ one.\ This\ will\ repeat\ for\ all\ digits\ that\ need\ to\ roll\ over\ until\ we\ reach\ the\ end\ of\ the\ answerArray.\r\n\ \r\n\ @param\ digit\ the\ current\ number\ in\ the\ answerArray\ that\ we\ are\ increasing.\ used\ to\ traverse\ through\ the\ answerArray\ recursively.\ should\ always\ be\ called\ from\ the\ outside\ as\ Increment(0)\r\n\ @return\ void\r\n
comment3.params=theBoard
comment3.target=boolean\ check(int[][])
comment3.text=\r\n\ Checks\ the\ current\ temp\ board\ for\ correctness\ by\ checking\ each\ row,\ column,\ and\ box\ for\ duplicates,\ in\ that\ order.\ \r\n\ \r\n\ @param\ theBoard\ the\ board\ we\ are\ checking\ \r\n\ @return\ true\ if\ the\ board\ is\ correct\r\n
comment4.params=boxIndex
comment4.target=boolean\ checkBox(int)
comment4.text=\r\n\ checks\ each\ individual\ "box"\ for\ duplicates.\ This\ method\ works\ by\ iterating\ over\ the\ width\ and\ height\ of\ each\ box,\ starting\ with\ the\ upperleft\ most\ box,\ moving\ down\r\n\ through\ the\ left\ column\ of\ boxes.\ Once\ we\ hit\ the\ bottomleft\ most\ box,\ we\ move\ back\ up\ to\ the\ top\ and\ over\ to\ the\ next\ column\ to\ the\ right.\ We\ continue\ until\ we\ reach\ the\r\n\ bottom\ right\ most\ box.\r\n\ \r\n\ @param\ boxIndex\ starting\ position\ for\ checking\ the\ boxes\ in\ a\ specified\ column\ of\ boxes\r\n\ @return\ true\ if\ the\ boxes\ do\ not\ have\ duplicates\r\n
comment5.params=
comment5.target=void\ resetBoard()
comment5.text=\r\n\ initializes\ and\ resets\ our\ temporary\ board\ after\ every\ attempt\ to\ solve\r\n\ \r\n\ @param\ none\r\n\ @return\ void\r\n
numComments=6
